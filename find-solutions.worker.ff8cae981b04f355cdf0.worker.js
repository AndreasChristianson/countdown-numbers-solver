(()=>{"use strict";const t={add:{opCode:"add",description:"Addition",applyNativeOperation:function(t,e){return t+e},symmetric:!0,symbol:"+"},subtract:{opCode:"subtract",description:"Subtraction",applyNativeOperation:function(t,e){return t-e},symmetric:!1,symbol:"-"},multiply:{opCode:"multiply",description:"Multiplication",applyNativeOperation:function(t,e){return t*e},symmetric:!0,symbol:"*"},divide:{opCode:"divide",description:"Division",applyNativeOperation:function(t,e){return t/e},symmetric:!1,symbol:"/"},exponentiation:{opCode:"exponentiation",description:"Power",applyNativeOperation:function(t,e){return Math.pow(t,e)},symmetric:!1,symbol:"^"}};function e(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var n=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.target=e,this.postMessage=n,this.distance=1/0,this.solutionsEvaluated=0,this.lastUpdate=Date.now()}var n,o;return n=t,(o=[{key:"evaluateSolution",value:function(t,e){this.solutionsEvaluated++,Date.now()-this.lastUpdate>1e3&&this.postCounts();var n,o=Math.abs(e-this.target);Number.isNaN(o)||o>this.distance||(o<this.distance&&(this.distance=o,this.postMessage({opType:"newMinDistanceFound",distance:o})),this.postMessage({opType:"addSolution",solution:(n=t,{steps:n.map((function(t){return"".concat(t.left," ").concat(t.operation.symbol," ").concat(t.right," = ").concat(t.result)}))})}))}},{key:"postCounts",value:function(){this.lastUpdate=Date.now(),this.postMessage({opType:"updateEvalCount",evalCount:this.solutionsEvaluated})}}])&&e(n.prototype,o),t}();function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}var r=function(e,r){var i,a,s,u,l=e.target;i=e.numbers,a=e.operations.map((function(e){return t[e]})),s=new n(l,r),u=new Array(i.length),function t(e){for(var n=e.steps,r=i.length,l=function(e){if(u[e])return"continue";for(var l=i[e],p=function(r){if(u[r])return"continue";var p,c=i[r],f=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,u=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return s=t.done,t},e:function(t){u=!0,a=t},f:function(){try{s||null==n.return||n.return()}finally{if(u)throw a}}}}(a);try{var y=function(){var o=p.value,a=function(a,l){var p=o.applyNativeOperation(a,l);i.push(p),u[e]=!0,u[r]=!0;var c={left:a,right:l,result:p,operation:o};n.push(c),s.evaluateSolution(n,p),t({steps:n}),i.pop(),u[e]=!1,u[r]=!1,n.pop()};a(l,c),o.symmetric||a(c,l)};for(f.s();!(p=f.n()).done;)y()}catch(t){f.e(t)}finally{f.f()}},c=e+1;c<r;c++)p(c)},p=0;p<r-1;p++)l(p)}({steps:[]}),s.postCounts(),r({opType:"complete"})};self.onmessage=t=>{r(t.data,self.postMessage.bind(self))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,